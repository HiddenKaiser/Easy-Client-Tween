--HiddenKaiser#0001

local ts = game:GetService("TweenService")
local Replicated = game:GetService("ReplicatedStorage")

local module = script:WaitForChild("Module", 3.5) and script.Module.Value or Replicated:WaitForChild("EasyClientTween")

local tickSync = require(module:WaitForChild("TickSyncer"))
local event = script:WaitForChild("Event", 3) and script.Event.Value or module:WaitForChild("Communicate")

if not event then
	return warn("No event found")
end

event.OnClientEvent:Connect(function(object, info, properties, Settings, gameTick, CancelEvent) -- Recieve request from the server
	local tween
	local currentTick = tickSync:GetTime() -- Get current time
	local ping = (currentTick - gameTick) --Get the ping
	
	if Settings.Sync then info[1] = (info[1] - ping) end --Subtract the tween time by players ping so it's synced up on all clients
	
	info = TweenInfo.new(unpack(info))
	
	local success, errorStatement = pcall(function()
		tween = ts:Create(object,info,properties)
	end) --pcall allows us to see errors
	
	if (not success or not tween) and Settings.PrintErrors then
		return warn("Check passed properties for tween: [" ..properties .."]")
	end -- Print error statement since a lot of begginners are probably gonna use this.
	
	tween:Play() -- Play the tween
	
	local connection;  local function cancelTween(objectToBeCancelled)  if object == objectToBeCancelled then  if connection then connection:Disconnect(); connection = nil;  end  tween:Cancel(); tween = nil  end  end -- compressed function that cancels the tween
	
	if CancelEvent then
		connection = CancelEvent.OnClientEvent:Connect(cancelTween)
		
		if info.RepeatCount >= 0 then --If repeats forever then will wait until is cancelled
			for i = 1,(1 + info.RepeatCount) do
				wait(info.Part)
			end --Wait until all repeats are done
			if connection then
				connection:Disconnect();
				connection = nil;
			end --Disconnect the end function since the tween finished
		end
	end
end)
